name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

# Cancel in-progress runs for the same workflow on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'

jobs:
  # Fast checks that can fail early
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      python-changed: ${{ steps.changes.outputs.python }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for change detection

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'banktransactions/**'
              - 'shared/**'
              - 'pyproject.toml'
              - 'requirements.txt'
            frontend:
              - 'frontend/**'
            python:
              - '**/*.py'
              - 'pyproject.toml'
              - 'requirements.txt'

      - name: Set up Python
        if: steps.changes.outputs.python == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            pyproject.toml

      - name: Install Python dependencies
        if: steps.changes.outputs.python == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Lint with Ruff
        if: steps.changes.outputs.python == 'true'
        run: ruff check . --output-format=github

      - name: Check formatting with Black
        if: steps.changes.outputs.python == 'true'
        run: black --check .

  # Security and dependency checks
  security-checks:
    name: Security & Dependencies
    runs-on: ubuntu-latest
    needs: quick-checks
    if: needs.quick-checks.outputs.python-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            pyproject.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install pip-audit safety

      - name: Run pip-audit for vulnerability scanning
        run: pip-audit --desc --output=json --format=json || true

      - name: Run safety check
        run: safety check --json || true

      - name: Run Gitleaks secret scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Only required for Gitleaks Enterprise

  # Backend tests with optimized execution
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: [quick-checks, security-checks]
    if: always() && needs.quick-checks.outputs.backend-changed == 'true' && needs.quick-checks.result == 'success'
    strategy:
      matrix:
        test-group: [unit, integration]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_kanakku
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            pyproject.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run unit tests
        if: matrix.test-group == 'unit'
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_kanakku
          REDIS_URL: redis://localhost:6379/0
          FLASK_ENV: testing
        run: |
          pytest backend/tests/ banktransactions/tests/ shared/ \
            -m "unit or not integration" \
            --cov=backend/app \
            --cov=banktransactions \
            --cov=shared \
            --cov-report=xml \
            --cov-report=term-missing \
            --junit-xml=test-results-unit.xml

      - name: Run integration tests
        if: matrix.test-group == 'integration'
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_kanakku
          REDIS_URL: redis://localhost:6379/0
          FLASK_ENV: testing
        run: |
          pytest backend/tests/ banktransactions/tests/ \
            -m "integration" \
            --junit-xml=test-results-integration.xml

      - name: Upload coverage to Codecov
        if: matrix.test-group == 'unit'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-group }}
          path: test-results-*.xml

  # Frontend tests with caching
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: quick-checks
    if: needs.quick-checks.outputs.frontend-changed == 'true'
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: 'frontend/yarn.lock'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Lint frontend code
        run: yarn lint || true  # Don't fail on lint warnings for now

      - name: Run frontend tests
        run: CI=true yarn test:ci --coverage --watchAll=false

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  # Build verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always() && (needs.backend-tests.result == 'success' || needs.backend-tests.result == 'skipped') && (needs.frontend-tests.result == 'success' || needs.frontend-tests.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: 'frontend/yarn.lock'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            pyproject.toml

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Install frontend dependencies
        working-directory: frontend
        run: yarn install --frozen-lockfile

      - name: Build frontend
        working-directory: frontend
        run: yarn build

      - name: Verify backend can start
        env:
          FLASK_ENV: testing
          DATABASE_URL: sqlite:///test.db
        run: |
          cd backend
          python -c "from app import create_app; app = create_app(); print('✅ Backend can start successfully')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            frontend/build/
          retention-days: 7

  # Final status check
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [quick-checks, security-checks, backend-tests, frontend-tests, build-verification]
    if: always()
    steps:
      - name: Check CI status
        run: |
          echo "Quick checks: ${{ needs.quick-checks.result }}"
          echo "Security checks: ${{ needs.security-checks.result }}"
          echo "Backend tests: ${{ needs.backend-tests.result }}"
          echo "Frontend tests: ${{ needs.frontend-tests.result }}"
          echo "Build verification: ${{ needs.build-verification.result }}"

          if [[ "${{ needs.quick-checks.result }}" == "failure" ]]; then
            echo "❌ Quick checks failed"
            exit 1
          fi

          if [[ "${{ needs.security-checks.result }}" == "failure" ]]; then
            echo "❌ Security checks failed"
            exit 1
          fi

          if [[ "${{ needs.backend-tests.result }}" == "failure" ]]; then
            echo "❌ Backend tests failed"
            exit 1
          fi

          if [[ "${{ needs.frontend-tests.result }}" == "failure" ]]; then
            echo "❌ Frontend tests failed"
            exit 1
          fi

          if [[ "${{ needs.build-verification.result }}" == "failure" ]]; then
            echo "❌ Build verification failed"
            exit 1
          fi

          echo "✅ All CI checks passed!"
