name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'

jobs:
  # Python dependency vulnerability scanning
  python-security:
    name: Python Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            pyproject.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install pip-audit safety bandit semgrep

      - name: Run pip-audit (OSV database)
        run: |
          pip-audit --desc --format=json --output=pip-audit-results.json || true
          pip-audit --desc --format=cyclonedx-json --output=pip-audit-sbom.json || true

      - name: Run Safety (PyUp database)
        run: |
          safety check --json --output=safety-results.json || true

      - name: Run Bandit (security linting)
        run: |
          bandit -r backend/ banktransactions/ shared/ -f json -o bandit-results.json || true

      - name: Run Semgrep (SAST)
        run: |
          semgrep --config=auto --json --output=semgrep-results.json backend/ banktransactions/ shared/ || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: python-security-results
          path: |
            pip-audit-results.json
            pip-audit-sbom.json
            safety-results.json
            bandit-results.json
            semgrep-results.json
          retention-days: 30

      - name: Check for critical vulnerabilities
        run: |
          echo "Checking for critical vulnerabilities..."
          
          # Check pip-audit results
          if [ -f pip-audit-results.json ]; then
            CRITICAL_COUNT=$(jq '[.vulnerabilities[] | select(.aliases[]? | contains("CRITICAL"))] | length' pip-audit-results.json 2>/dev/null || echo "0")
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "❌ Found $CRITICAL_COUNT critical vulnerabilities in pip-audit"
              jq '.vulnerabilities[] | select(.aliases[]? | contains("CRITICAL"))' pip-audit-results.json
              exit 1
            fi
          fi
          
          # Check bandit results for high severity issues
          if [ -f bandit-results.json ]; then
            HIGH_SEVERITY=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' bandit-results.json 2>/dev/null || echo "0")
            if [ "$HIGH_SEVERITY" -gt 0 ]; then
              echo "⚠️ Found $HIGH_SEVERITY high severity security issues in Bandit"
              # Don't fail on Bandit high severity for now, just warn
            fi
          fi
          
          echo "✅ No critical vulnerabilities found"

  # Frontend dependency vulnerability scanning
  frontend-security:
    name: Frontend Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: 'frontend/yarn.lock'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run npm audit
        run: |
          yarn audit --json > npm-audit-results.json || true
          yarn audit --level high --json > npm-audit-high.json || true

      - name: Run ESLint security plugin
        run: |
          # Install security-focused ESLint plugins
          yarn add --dev eslint-plugin-security eslint-plugin-no-secrets
          
          # Create temporary ESLint config for security scanning
          cat > .eslintrc.security.js << 'EOF'
          module.exports = {
            extends: ['plugin:security/recommended'],
            plugins: ['security', 'no-secrets'],
            rules: {
              'no-secrets/no-secrets': 'error',
              'security/detect-object-injection': 'error',
              'security/detect-non-literal-regexp': 'error',
              'security/detect-unsafe-regex': 'error',
              'security/detect-buffer-noassert': 'error',
              'security/detect-child-process': 'error',
              'security/detect-disable-mustache-escape': 'error',
              'security/detect-eval-with-expression': 'error',
              'security/detect-no-csrf-before-method-override': 'error',
              'security/detect-non-literal-fs-filename': 'error',
              'security/detect-non-literal-require': 'error',
              'security/detect-possible-timing-attacks': 'error',
              'security/detect-pseudoRandomBytes': 'error'
            }
          };
          EOF
          
          # Run security-focused linting
          npx eslint src/ --config .eslintrc.security.js --format json --output-file eslint-security-results.json || true

      - name: Upload frontend security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-security-results
          path: |
            frontend/npm-audit-results.json
            frontend/npm-audit-high.json
            frontend/eslint-security-results.json
          retention-days: 30

      - name: Check for critical frontend vulnerabilities
        run: |
          echo "Checking for critical frontend vulnerabilities..."
          
          if [ -f npm-audit-high.json ]; then
            # Check if there are any high or critical vulnerabilities
            HIGH_VULNS=$(jq '.metadata.vulnerabilities.high // 0' npm-audit-high.json 2>/dev/null || echo "0")
            CRITICAL_VULNS=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit-high.json 2>/dev/null || echo "0")
            
            if [ "$CRITICAL_VULNS" -gt 0 ]; then
              echo "❌ Found $CRITICAL_VULNS critical vulnerabilities in frontend dependencies"
              exit 1
            fi
            
            if [ "$HIGH_VULNS" -gt 0 ]; then
              echo "⚠️ Found $HIGH_VULNS high severity vulnerabilities in frontend dependencies"
              # Don't fail on high severity for now, just warn
            fi
          fi
          
          echo "✅ No critical frontend vulnerabilities found"

  # Secret scanning
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml

  # CodeQL analysis
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [python-security, frontend-security, secret-scanning, codeql-analysis]
    if: always()
    steps:
      - name: Download all security artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-results

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Job Results" >> security-summary.md
          echo "- Python Security: ${{ needs.python-security.result }}" >> security-summary.md
          echo "- Frontend Security: ${{ needs.frontend-security.result }}" >> security-summary.md
          echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> security-summary.md
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-summary.md
          echo "" >> security-summary.md
          
          if [ -d "security-results" ]; then
            echo "## Artifacts Generated" >> security-summary.md
            find security-results -name "*.json" -type f | while read file; do
              echo "- $(basename "$file")" >> security-summary.md
            done
          fi
          
          echo "" >> security-summary.md
          echo "Generated on: $(date -u)" >> security-summary.md
          
          cat security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 30 