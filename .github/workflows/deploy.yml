name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  DEPLOY_PATH: '/opt/kanakku'
  SERVICE_USER: 'kanakku'

jobs:
  # Run tests before deployment
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_kanakku
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          chmod +x lint.sh
          ./lint.sh

      - name: Initialize test database
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_kanakku
          FLASK_ENV: testing
          FLASK_SKIP_DB_CREATE: "1"
        run: |
          # Drop and recreate the test database to ensure clean state
          PGPASSWORD=test_password psql -h localhost -U test_user -d postgres -c "DROP DATABASE IF EXISTS test_kanakku;"
          PGPASSWORD=test_password psql -h localhost -U test_user -d postgres -c "CREATE DATABASE test_kanakku;"

          cd backend
          # Run database migrations to create all tables
          python -m flask db upgrade

      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_kanakku
          REDIS_URL: redis://localhost:6379/0
          FLASK_ENV: testing
        run: |
          pytest backend/tests/ banktransactions/tests/ shared/ \
            --cov=backend/app \
            --cov=banktransactions \
            --cov=shared \
            --cov-report=term-missing

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test:ci

  # Build application artifacts
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: success() || github.event.inputs.force_deploy == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Create deployment archive
        run: |
          # Create deployment directory structure
          mkdir -p deploy/backend
          mkdir -p deploy/frontend
          mkdir -p deploy/config
          mkdir -p deploy/scripts

          # Copy backend files
          cp -r backend/* deploy/backend/
          cp -r banktransactions deploy/
          cp -r shared deploy/
          cp -r adminserver deploy/
          cp pyproject.toml deploy/

          # Copy frontend build
          cp -r frontend/build/* deploy/frontend/

          # Copy configuration files
          cp nginx-kanakku.conf deploy/config/
          cp kanakku.service deploy/config/
          cp kanakku-worker.service deploy/config/
          cp kanakku-scheduler.service deploy/config/
          cp kanakku-admin-server.service deploy/config/

          # Copy admin server test script
          cp adminserver/test_imports.py deploy/adminserver/

          # Copy scripts
          cp -r scripts deploy/
          chmod +x deploy/scripts/*.sh

          # Create deployment scripts
          cat > deploy/scripts/deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          DEPLOY_PATH="/opt/kanakku"
          SERVICE_USER="kanakku"
          BACKUP_DIR="/opt/kanakku/backups/$(date +%Y%m%d_%H%M%S)"

          echo "Starting deployment..."

          # Create backup (exclude the backups directory to avoid recursive copy)
          if [ -d "$DEPLOY_PATH" ]; then
            echo "Creating backup..."
            sudo mkdir -p "$BACKUP_DIR"
            # Copy all files except the backups directory
            sudo find "$DEPLOY_PATH" -maxdepth 1 -not -name "backups" -not -path "$DEPLOY_PATH" -exec cp -r {} "$BACKUP_DIR/" \; || true
          fi

          # Stop services
          echo "Stopping services..."
          sudo systemctl stop kanakku || true
          sudo systemctl stop kanakku-worker || true
          sudo systemctl stop kanakku-scheduler || true
          sudo systemctl stop kanakku-admin-server || true

          # Create deployment directory and set permissions
          sudo mkdir -p "$DEPLOY_PATH"

          # Remove old virtual environments to avoid permission issues
          sudo rm -rf "$DEPLOY_PATH/backend/venv" || true
          sudo rm -rf "$DEPLOY_PATH/adminserver/venv" || true

          # Copy new files
          echo "Copying application files..."
          sudo cp -r backend "$DEPLOY_PATH/"
          sudo cp -r banktransactions "$DEPLOY_PATH/"
          sudo cp -r shared "$DEPLOY_PATH/"
          sudo cp -r adminserver "$DEPLOY_PATH/"
          sudo cp pyproject.toml "$DEPLOY_PATH/"

          # Copy scripts
          sudo cp -r scripts "$DEPLOY_PATH/" || echo "Warning: Could not copy scripts directory"

          # Copy frontend build
          sudo mkdir -p /var/www/kanakku
          sudo cp -r frontend/* /var/www/kanakku/
          sudo chown -R www-data:www-data /var/www/kanakku

          # Set ownership before creating virtual environments
          sudo chown -R "$SERVICE_USER:$SERVICE_USER" "$DEPLOY_PATH"

          # Set up Python virtual environment
          echo "Setting up Python environment..."
          cd "$DEPLOY_PATH"
          sudo -u "$SERVICE_USER" python3 -m venv backend/venv
          sudo -u "$SERVICE_USER" backend/venv/bin/pip install --upgrade pip
          sudo -u "$SERVICE_USER" backend/venv/bin/pip install -e .

          # Set up Admin Server virtual environment
          echo "Setting up Admin Server environment..."
          sudo -u "$SERVICE_USER" python3 -m venv adminserver/venv
          sudo -u "$SERVICE_USER" adminserver/venv/bin/pip install --upgrade pip
          sudo -u "$SERVICE_USER" adminserver/venv/bin/pip install -e .

          # Copy admin server test script
          sudo cp adminserver/test_imports.py "$DEPLOY_PATH/adminserver/" || echo "Warning: Could not copy test_imports.py"

          # Set final permissions
          sudo chown -R "$SERVICE_USER:$SERVICE_USER" "$DEPLOY_PATH"
          sudo chmod +x "$DEPLOY_PATH/backend/venv/bin/"* || true
          sudo chmod +x "$DEPLOY_PATH/adminserver/venv/bin/"* || true

          echo "Deployment files copied successfully"
          EOF

          cat > deploy/scripts/configure.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "Configuring services and nginx..."

          # Copy and enable systemd services
          sudo cp config/kanakku.service /etc/systemd/system/
          sudo cp config/kanakku-worker.service /etc/systemd/system/
          sudo cp config/kanakku-scheduler.service /etc/systemd/system/
          sudo cp config/kanakku-admin-server.service /etc/systemd/system/
          sudo systemctl daemon-reload
          sudo systemctl enable kanakku
          sudo systemctl enable kanakku-worker
          sudo systemctl enable kanakku-scheduler
          sudo systemctl enable kanakku-admin-server

          # Configure nginx
          sudo cp config/nginx-kanakku.conf /etc/nginx/sites-available/kanakku
          sudo ln -sf /etc/nginx/sites-available/kanakku /etc/nginx/sites-enabled/
          sudo nginx -t

          echo "Configuration completed"
          EOF

          cat > deploy/scripts/start.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "Starting services..."

          # Run database migrations with proper error handling
          cd /opt/kanakku

          # Check if database tables exist and handle migration accordingly
          echo "Checking if database tables exist..."

          # Get database name from environment
          DB_NAME=$(grep -E "^DATABASE_URL=" /opt/kanakku/.env | cut -d'/' -f4 | cut -d'?' -f1 || echo "kanakku")
          echo "Using database: $DB_NAME"

          # Check if user table exists using psql
          if sudo -u postgres psql -d "$DB_NAME" -c "\\dt" 2>/dev/null | grep -q "user"; then
            echo "Database tables already exist, marking migration as complete..."
            cd backend
            # Set environment variables for Flask
            export FLASK_APP=app
            export FLASK_ENV=production
            export FLASK_SKIP_DB_CREATE=1

            # First ensure the alembic_version table exists
            sudo -u kanakku -E venv/bin/flask db stamp head || {
              echo "Could not stamp migration, trying to create alembic_version table..."
              sudo -u postgres psql -d "$DB_NAME" -c "CREATE TABLE IF NOT EXISTS alembic_version (version_num VARCHAR(32) NOT NULL, CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num));" || true
              sudo -u kanakku -E venv/bin/flask db stamp head || echo "Still could not stamp migration"
            }
          else
            echo "No existing tables found, running database migrations..."
            cd backend
            export FLASK_APP=app
            export FLASK_ENV=production
            export FLASK_SKIP_DB_CREATE=1
            sudo -u kanakku -E venv/bin/flask db upgrade || echo "Migration failed or not needed"
          fi

          # Test admin server imports before starting
          echo "Testing admin server dependencies..."
          cd /opt/kanakku/adminserver
          if sudo -u kanakku venv/bin/python test_imports.py; then
            echo "Admin server dependencies OK"
          else
            echo "Warning: Admin server dependencies have issues, but continuing..."
          fi

          # Start services one by one with error checking
          echo "Starting main application..."
          sudo systemctl start kanakku
          sleep 3

          echo "Starting worker service..."
          sudo systemctl start kanakku-worker
          sleep 2

          echo "Starting scheduler service..."
          sudo systemctl start kanakku-scheduler
          sleep 2

          echo "Starting admin server..."
          sudo systemctl start kanakku-admin-server || {
            echo "Warning: Admin server failed to start, checking logs..."
            sudo journalctl -u kanakku-admin-server --no-pager -n 20
            echo "Continuing without admin server..."
          }
          sleep 2

          echo "Reloading nginx..."
          sudo systemctl reload nginx

          # Check service status
          echo "Checking service status..."
          sudo systemctl status kanakku --no-pager || echo "Main service status check failed"
          sudo systemctl status kanakku-worker --no-pager || echo "Worker service status check failed"
          sudo systemctl status kanakku-scheduler --no-pager || echo "Scheduler service status check failed"
          sudo systemctl status kanakku-admin-server --no-pager || echo "Admin server status check failed"

          echo "Services startup completed"

          # Run health check if available
          if [ -f "/opt/kanakku/scripts/health_check.sh" ]; then
            echo "Running health check..."
            chmod +x /opt/kanakku/scripts/health_check.sh
            /opt/kanakku/scripts/health_check.sh || echo "Health check completed with warnings"
          fi
          EOF

          # Make scripts executable
          chmod +x deploy/scripts/*.sh

          # Create deployment archive
          tar -czf kanakku-deploy.tar.gz -C deploy .

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: kanakku-deployment
          path: kanakku-deploy.tar.gz
          retention-days: 30

  # Deploy to production server
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: success() || github.event.inputs.force_deploy == 'true'

    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: kanakku-deployment

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Copy deployment files to server
        run: |
          scp kanakku-deploy.tar.gz ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/tmp/

      - name: Deploy application
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          set -e

          # Create a temporary deployment directory with proper permissions
          DEPLOY_TEMP="/tmp/kanakku-deploy-$(date +%s)"
          mkdir -p "$DEPLOY_TEMP"
          cd "$DEPLOY_TEMP"

          # Extract deployment files with relaxed permissions
          tar -xzf /tmp/kanakku-deploy.tar.gz --no-same-owner --no-same-permissions

          # Run deployment scripts
          chmod +x scripts/*.sh

          # Deploy application files
          ./scripts/deploy.sh

          # Configure services (only on first deployment or when configs change)
          ./scripts/configure.sh

          # Start services
          ./scripts/start.sh

          # Cleanup
          cd /tmp
          rm -rf /tmp/kanakku-deploy.tar.gz "$DEPLOY_TEMP"

          echo "Deployment completed successfully!"
          EOF

      - name: Health check
        run: |
          # Wait a moment for services to fully start
          sleep 10

          # Check if the application is responding
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          # Test backend health
          curl -f http://localhost:8000/api/v1/health || echo "Backend health check failed"

          # Check service status
          sudo systemctl is-active kanakku
          sudo systemctl is-active kanakku-worker
          sudo systemctl is-active kanakku-scheduler
          sudo systemctl is-active kanakku-admin-server
          sudo systemctl is-active nginx
          EOF

      - name: Cleanup on failure
        if: failure()
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF' || true
          # Restore from backup if deployment failed
          LATEST_BACKUP=$(ls -t /opt/kanakku/backups/ | head -n1)
          if [ -n "$LATEST_BACKUP" ]; then
            echo "Restoring from backup: $LATEST_BACKUP"
            sudo systemctl stop kanakku || true
            sudo systemctl stop kanakku-worker || true
            sudo systemctl stop kanakku-scheduler || true
            sudo systemctl stop kanakku-admin-server || true
            sudo cp -r "/opt/kanakku/backups/$LATEST_BACKUP"/* /opt/kanakku/
            sudo chown -R kanakku:kanakku /opt/kanakku
            sudo systemctl start kanakku || true
            sudo systemctl start kanakku-worker || true
            sudo systemctl start kanakku-scheduler || true
            sudo systemctl start kanakku-admin-server || true
          fi
          EOF

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deployment to production completed successfully!"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Deployed by: ${{ github.actor }}"

      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment to production failed!"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Check the logs for details."
