# Windsurf Code Quality Rules
version: 1.0

description: Code quality, organization, and refactoring guidelines for maintainable codebases

rules:
  - name: general_standards
    description: General code quality standards
    applies_to: "**/*.{js,jsx,ts,tsx,py}"
    always_apply: true
    content: |
      - Keep files under 300 lines
      - Follow project structure:
        - Backend: Flask Blueprints
        - Frontend: Feature-based directories
      - Avoid duplication
      - Prefer existing patterns over new ones
      - Remove old implementations when refactoring
      - No "improved-" or "refactored-" file names

  - name: refactoring
    description: Refactoring guidelines
    content: |
      - Look for duplicate code/files
      - Edit existing files rather than creating copies
      - Focus on measurable improvements
      - Maintain backward compatibility
      - Test thoroughly after changes

  - name: organization
    description: Code organization principles
    content: |
      - Backend structure:
        - models.py
        - services.py
        - routes.py
        - schemas.py
      - Frontend structure:
        - components/
        - hooks/
        - pages/
        - services/
      - Naming conventions:
        - Python: snake_case, PascalCase
        - JavaScript: camelCase, PascalCase
      - Import organization:
        - Python: isort
        - JavaScript: React → Libraries → MUI → Project

  - name: best_practices
    description: Coding best practices
    content: |
      - Self-documenting code
      - Comments for complex logic
      - Follow existing patterns
      - Consider performance
      - Readability over cleverness
      - Python: Docstrings & type hints
      - JavaScript: JSDoc & PropTypes

  - name: modularity
    description: Modularity and reusability
    content: |
      - Create reusable functions/components
      - Encapsulate shared logic
      - Keep It Simple (KISS)
      - Search for existing solutions first

  - name: documentation
    description: Documentation standards
    content: |
      - Python: Google/Sphinx style docstrings
      - JavaScript: Comprehensive JSDoc
      - TypeScript: Strong typing if used
      - Document complex business logic
