# Windsurf Frontend Rules
version: 1.0

description: React and frontend development standards including component design, state management, and API integration

rules:
  - name: component_standards
    description: React component standards
    applies_to: "src/**/*.{js,jsx,ts,tsx}"
    always_apply: true
    content: |
      - Use functional components with hooks
      - Keep components small and focused
      - Use meaningful names
      - Follow file naming conventions:
        - Components: PascalCase.jsx
        - Hooks: useCamelCase.js
        - Utilities: camelCase.js
        - Services: camelCaseService.js
        - CSS Modules: Component.module.css
      - Prioritize MUI components

  - name: state_management
    description: State management strategy
    content: |
      - Local state: useState/useReducer
      - Custom hooks for reusable logic
      - React Context for shared state
      - Avoid prop drilling
      - Complex state: Zustand/Redux Toolkit

  - name: api_integration
    description: API integration standards
    content: |
      - Always use configured axiosInstance
      - Handle errors in try/catch blocks
      - Show loading indicators
      - Validate responses
      - Refer to API documentation

  - name: mui_guidelines
    description: Material-UI standards
    content: |
      - Use MUI components consistently
      - Follow theme variables
      - Use sx prop for styling
      - Implement responsive design
      - Use MUI icons

  - name: forms
    description: Form handling standards
    content: |
      - Use controlled components
      - Client-side validation (Formik/Yup)
      - Disable submit buttons during submission
      - Clear forms after success
      - Use proper input types

  - name: error_handling
    description: Error handling and feedback
    content: |
      - Implement error boundaries
      - Show user-friendly messages
      - Use toast notifications
      - Provide loading states
      - Handle network errors gracefully

  - name: performance
    description: Performance optimization
    content: |
      - Use React.memo
      - Correct dependency arrays
      - Avoid objects/functions in render
      - Lazy load routes
      - Optimize assets

  - name: organization
    description: Code organization
    content: |
      - Feature-based directories
      - Consistent import order
      - Absolute imports (@/)
      - Keep components under 300 lines
      - Feature structure:
        - components/
        - hooks/
        - pages/
        - services/
        - utils/

  - name: accessibility
    description: Accessibility standards
    content: |
      - Semantic HTML and ARIA
      - Keyboard navigation
      - Alt text for images
      - Sufficient color contrast
      - Screen reader testing
