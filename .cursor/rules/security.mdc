---
description: Security standards for authentication, authorization, input validation, and production deployment
globs: "**/*"
alwaysApply: true
---

## Auth
Authentication standards
- Use configured axiosInstance (never import axios directly)
- JWT implementation:
  - Access tokens: Short-lived, stored in memory
  - Refresh tokens: Long-lived, HttpOnly Secure cookies
  - Backend validation: Check signature, expiration, claims
  - Automatic refresh: Via axios interceptor
- Use API tokens for programmatic access
- Implement rate limiting (Flask-Limiter with Redis)
- Never implement custom crypto - use werkzeug.security/cryptography
**Applies to:** **/*.{js,jsx,ts,tsx,py}


## Secrets
Secrets management
- Never commit .env files
- Use strong random keys for SECRET_KEY/JWT_SECRET_KEY
- Store config in environment variables
- Use different secrets per environment
- Encrypt sensitive data (AES-256-GCM)
- Never hardcode secrets


## Input Validation
Input validation standards
- Validate all inputs (frontend + backend)
- Use parameterized queries
- Sanitize UI output
- CSRF protection for cookie-based auth
- Secure file upload handling:
  - Validate file types/sizes
  - Scan for malware
  - Store in non-public locations
  - Serve via secure endpoints


## Api Security
API security standards
- Use HTTPS in production
- Configure strict CORS (Flask-CORS)
- Set security headers:
  - Content-Security-Policy
  - HSTS
  - X-Content-Type-Options
  - X-Frame-Options
  - Referrer-Policy
- Log security events
- Implement API versioning


## Db Security
Database security
- Use connection pooling
- Least privilege for DB user
- Encrypt sensitive data at rest
- Regular encrypted backups
- Monitor access patterns
- Secure password storage (werkzeug.security)


## Frontend Security
Frontend security
- No sensitive data in localStorage/sessionStorage
- Secure session management
- CSP headers
- Input validation/sanitization
- Safe error handling


## Production
Production security
- Use SSL/TLS
- Secure cookie attributes:
  - Secure
  - HttpOnly
  - SameSite
- Secure logging
- Regular dependency updates
- Security scanning in CI/CD
- Dependency vulnerability management:
  - pip-audit/safety check (Python)
  - npm/yarn audit (JS)


## Error Handling
Security error handling
- Generic API error messages
- Log security-relevant errors
- React error boundaries
- Generic auth failure messages
- Monitor error patterns
