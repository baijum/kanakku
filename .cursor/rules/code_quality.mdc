---
description: Code quality, organization, and refactoring guidelines for maintainable codebases
globs: "**/*"
alwaysApply: true
---

## General Standards
General code quality standards
- Keep files under 300 lines
- Follow project structure:
  - Backend: Flask Blueprints
  - Frontend: Feature-based directories
- Avoid duplication
- Prefer existing patterns over new ones
- Remove old implementations when refactoring
- No "improved-" or "refactored-" file names
**Applies to:** **/*.{js,jsx,ts,tsx,py}


## Refactoring
Refactoring guidelines
- Look for duplicate code/files
- Edit existing files rather than creating copies
- Focus on measurable improvements
- Maintain backward compatibility
- Test thoroughly after changes


## Organization
Code organization principles
- Backend structure:
  - models.py
  - services.py
  - routes.py
  - schemas.py
- Frontend structure:
  - components/
  - hooks/
  - pages/
  - services/
- Naming conventions:
  - Python: snake_case, PascalCase
  - JavaScript: camelCase, PascalCase
- Import organization:
  - Python: isort
  - JavaScript: React → Libraries → MUI → Project


## Best Practices
Coding best practices
- Self-documenting code
- Comments for complex logic
- Follow existing patterns
- Consider performance
- Readability over cleverness
- Python: Docstrings & type hints
- JavaScript: JSDoc & PropTypes


## Modularity
Modularity and reusability
- Create reusable functions/components
- Encapsulate shared logic
- Keep It Simple (KISS)
- Search for existing solutions first


## Documentation
Documentation standards
- Python: Google/Sphinx style docstrings
- JavaScript: Comprehensive JSDoc
- TypeScript: Strong typing if used
- Document complex business logic
