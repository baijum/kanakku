---
description: Production deployment standards for server management, security, and monitoring
globs: "**/*"
alwaysApply: true
---

## Server Management
Server management standards
- Kill running servers before starting new ones
- Start new server after changes for testing
**Applies to:** docker-compose.yml,Dockerfile,**/*.{sh,yml,yaml}


## Environment
Environment configuration
- Separate configs per environment
- Never commit production secrets
- Generate strong secret keys
- Different DB credentials per env
- HTTPS required in production
- Environment variable naming: KANAKKU_* prefix


## Docker
Docker best practices
- Use multi-stage builds
- Run as non-root users
- Specific version tags (not 'latest')
- Implement health checks
- Use volumes for persistent data


## Database
Database deployment
- Use PostgreSQL in production
- Automated migrations (Alembic)
- Regular encrypted backups
- Connection pooling
- Performance monitoring


## Web Server
Web server configuration
- Nginx as reverse proxy
- Strong SSL/TLS configuration
- Security headers (HSTS, CSP, etc.)
- Static asset caching
- Rate limiting


## App Server
Application server
- Gunicorn with multiple workers
- Graceful shutdowns
- Log to stdout/stderr
- Performance monitoring


## Monitoring
Monitoring and logging
- Centralized logging
- Application performance monitoring
- Health check endpoints
- Resource usage alerts


## Security
Security hardening
- Firewall restrictions
- Strict user permissions
- Regular security updates
- Secrets management
- Intrusion detection


## Backups
Backup and recovery
- Automated daily backups
- Test restoration procedures
- Multiple backup locations
- Disaster recovery documentation


## Ci Cd
CI/CD pipeline
- Automated testing
- Linting/quality checks
- Security scanning
- Zero-downtime deployments
- Rollback capability


## Performance
Performance optimization
- CDN for static assets
- Caching strategies
- Database optimization
- HTTP compression
- Startup time monitoring


## Scalability
Scalability considerations
- Design for horizontal scaling
- Load balancers
- Distributed session storage
- Message queues
- Database scaling strategies


## Documentation
Documentation requirements
- Maintain deployment docs
- Document all environment variables
- Create operational runbooks
- Troubleshooting procedures
- Current architecture diagrams

